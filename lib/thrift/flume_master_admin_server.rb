#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'mastercontrol_types'

module FlumeMasterAdminServer
  class Client
    include ::Thrift::Client

    def submit(command)
      send_submit(command)
      return recv_submit()
    end

    def send_submit(command)
      send_message('submit', Submit_args, :command => command)
    end

    def recv_submit()
      result = receive_message(Submit_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'submit failed: unknown result')
    end

    def isSuccess(cmdid)
      send_isSuccess(cmdid)
      return recv_isSuccess()
    end

    def send_isSuccess(cmdid)
      send_message('isSuccess', IsSuccess_args, :cmdid => cmdid)
    end

    def recv_isSuccess()
      result = receive_message(IsSuccess_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'isSuccess failed: unknown result')
    end

    def isFailure(cmdid)
      send_isFailure(cmdid)
      return recv_isFailure()
    end

    def send_isFailure(cmdid)
      send_message('isFailure', IsFailure_args, :cmdid => cmdid)
    end

    def recv_isFailure()
      result = receive_message(IsFailure_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'isFailure failed: unknown result')
    end

    def getNodeStatuses()
      send_getNodeStatuses()
      return recv_getNodeStatuses()
    end

    def send_getNodeStatuses()
      send_message('getNodeStatuses', GetNodeStatuses_args)
    end

    def recv_getNodeStatuses()
      result = receive_message(GetNodeStatuses_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getNodeStatuses failed: unknown result')
    end

    def getConfigs()
      send_getConfigs()
      return recv_getConfigs()
    end

    def send_getConfigs()
      send_message('getConfigs', GetConfigs_args)
    end

    def recv_getConfigs()
      result = receive_message(GetConfigs_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getConfigs failed: unknown result')
    end

    def hasCmdId(cmdid)
      send_hasCmdId(cmdid)
      return recv_hasCmdId()
    end

    def send_hasCmdId(cmdid)
      send_message('hasCmdId', HasCmdId_args, :cmdid => cmdid)
    end

    def recv_hasCmdId()
      result = receive_message(HasCmdId_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'hasCmdId failed: unknown result')
    end

    def getCmdStatus(cmdid)
      send_getCmdStatus(cmdid)
      return recv_getCmdStatus()
    end

    def send_getCmdStatus(cmdid)
      send_message('getCmdStatus', GetCmdStatus_args, :cmdid => cmdid)
    end

    def recv_getCmdStatus()
      result = receive_message(GetCmdStatus_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getCmdStatus failed: unknown result')
    end

    def getMappings(physicalNode)
      send_getMappings(physicalNode)
      return recv_getMappings()
    end

    def send_getMappings(physicalNode)
      send_message('getMappings', GetMappings_args, :physicalNode => physicalNode)
    end

    def recv_getMappings()
      result = receive_message(GetMappings_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getMappings failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_submit(seqid, iprot, oprot)
      args = read_args(iprot, Submit_args)
      result = Submit_result.new()
      result.success = @handler.submit(args.command)
      write_result(result, oprot, 'submit', seqid)
    end

    def process_isSuccess(seqid, iprot, oprot)
      args = read_args(iprot, IsSuccess_args)
      result = IsSuccess_result.new()
      result.success = @handler.isSuccess(args.cmdid)
      write_result(result, oprot, 'isSuccess', seqid)
    end

    def process_isFailure(seqid, iprot, oprot)
      args = read_args(iprot, IsFailure_args)
      result = IsFailure_result.new()
      result.success = @handler.isFailure(args.cmdid)
      write_result(result, oprot, 'isFailure', seqid)
    end

    def process_getNodeStatuses(seqid, iprot, oprot)
      args = read_args(iprot, GetNodeStatuses_args)
      result = GetNodeStatuses_result.new()
      result.success = @handler.getNodeStatuses()
      write_result(result, oprot, 'getNodeStatuses', seqid)
    end

    def process_getConfigs(seqid, iprot, oprot)
      args = read_args(iprot, GetConfigs_args)
      result = GetConfigs_result.new()
      result.success = @handler.getConfigs()
      write_result(result, oprot, 'getConfigs', seqid)
    end

    def process_hasCmdId(seqid, iprot, oprot)
      args = read_args(iprot, HasCmdId_args)
      result = HasCmdId_result.new()
      result.success = @handler.hasCmdId(args.cmdid)
      write_result(result, oprot, 'hasCmdId', seqid)
    end

    def process_getCmdStatus(seqid, iprot, oprot)
      args = read_args(iprot, GetCmdStatus_args)
      result = GetCmdStatus_result.new()
      result.success = @handler.getCmdStatus(args.cmdid)
      write_result(result, oprot, 'getCmdStatus', seqid)
    end

    def process_getMappings(seqid, iprot, oprot)
      args = read_args(iprot, GetMappings_args)
      result = GetMappings_result.new()
      result.success = @handler.getMappings(args.physicalNode)
      write_result(result, oprot, 'getMappings', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Submit_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    COMMAND = 1

    FIELDS = {
      COMMAND => {:type => ::Thrift::Types::STRUCT, :name => 'command', :class => FlumeMasterCommandThrift}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Submit_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IsSuccess_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CMDID = 1

    FIELDS = {
      CMDID => {:type => ::Thrift::Types::I64, :name => 'cmdid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IsSuccess_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IsFailure_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CMDID = 1

    FIELDS = {
      CMDID => {:type => ::Thrift::Types::I64, :name => 'cmdid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IsFailure_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetNodeStatuses_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetNodeStatuses_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => FlumeNodeStatusThrift}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetConfigs_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetConfigs_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ThriftFlumeConfigData}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class HasCmdId_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CMDID = 1

    FIELDS = {
      CMDID => {:type => ::Thrift::Types::I64, :name => 'cmdid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class HasCmdId_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCmdStatus_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CMDID = 1

    FIELDS = {
      CMDID => {:type => ::Thrift::Types::I64, :name => 'cmdid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCmdStatus_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => CommandStatusThrift}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetMappings_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PHYSICALNODE = 1

    FIELDS = {
      PHYSICALNODE => {:type => ::Thrift::Types::STRING, :name => 'physicalNode'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetMappings_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRING}}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

