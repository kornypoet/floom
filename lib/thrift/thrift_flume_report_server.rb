#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'flumereportserver_types'

module ThriftFlumeReportServer
  class Client
    include ::Thrift::Client

    def getAllReports()
      send_getAllReports()
      return recv_getAllReports()
    end

    def send_getAllReports()
      send_message('getAllReports', GetAllReports_args)
    end

    def recv_getAllReports()
      result = receive_message(GetAllReports_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAllReports failed: unknown result')
    end

    def getReportByName(reportName)
      send_getReportByName(reportName)
      return recv_getReportByName()
    end

    def send_getReportByName(reportName)
      send_message('getReportByName', GetReportByName_args, :reportName => reportName)
    end

    def recv_getReportByName()
      result = receive_message(GetReportByName_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getReportByName failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_getAllReports(seqid, iprot, oprot)
      args = read_args(iprot, GetAllReports_args)
      result = GetAllReports_result.new()
      result.success = @handler.getAllReports()
      write_result(result, oprot, 'getAllReports', seqid)
    end

    def process_getReportByName(seqid, iprot, oprot)
      args = read_args(iprot, GetReportByName_args)
      result = GetReportByName_result.new()
      result.success = @handler.getReportByName(args.reportName)
      write_result(result, oprot, 'getReportByName', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class GetAllReports_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllReports_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ThriftFlumeReport}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetReportByName_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REPORTNAME = 1

    FIELDS = {
      REPORTNAME => {:type => ::Thrift::Types::STRING, :name => 'reportName'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetReportByName_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ThriftFlumeReport}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

