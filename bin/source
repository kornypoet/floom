#!/usr/bin/env jruby --1.9
require 'java'
require 'socket'
require 'configliere' ; Settings.use(:commandline)

Setting.usage = <<HELP
Usage: floom source [options]

HELP
Settings.define :flume_home, :default     => ENV['FLUME_HOME'],  
                             :required    => true, 
                             :description => 'Set to the top-level directory of your Flume install'
Settings.define :host,       :default     => Socket.gethostname, 
                             :required    => true, 
                             :flag        => 'c',
                             :description => 'The hostname where a Flume rpcSource is running'
Settings.define :port,       :default     => 33333,              
                             :required    => true, 
                             :flag        => 'p',
                             :description => 'The port where a Flume rpcSource is listening'
Settings.resolve!

Dir[File.join(Settings.flume_home, '**/*.jar')].each{ |jar| require jar }

java_import 'java.net.URL'
java_import 'java.net.ConnectException'
java_import 'org.apache.avro.ipc.HttpTransceiver'
java_import 'org.apache.avro.ipc.AccountingTransceiver'
java_import 'org.apache.avro.ipc.specific.SpecificRequestor'
java_import 'com.cloudera.flume.core.EventImpl'
java_import 'com.cloudera.flume.handlers.avro.FlumeEventAvroServer'
java_import 'com.cloudera.flume.handlers.avro.AvroEventConvertUtil'
java_import 'org.slf4j.LoggerFactory'

class RubyRpcClient

  attr_reader :client, :transport
  
  def initialize(config = {})
    @transport = avro_transport(config[:host], config[:port]) 
    @client    = create_rpc_connection(transport)
  end

  def log
    @log ||= Java::OrgSlf4j::LoggerFactory.getLogger(self.class.to_s)
  end

  def avro_transport(host, port)
    url  = Java::JavaNet::URL.new("http://#{host}:#{port}")
    http = Java::OrgApacheAvroIpc::HttpTransceiver.new(url)
    Java::OrgApacheAvroIpc::AccountingTransceiver.new(http)
  end

  def create_rpc_connection(transport)
    client_klass = Java::ComClouderaFlumeHandlersAvro::FlumeEventAvroServer.java_class
    Java::OrgApacheAvroIpcSpecific::SpecificRequestor.getClient(client_klass, transport)
  end

  def avro_event(str)
    event = Java::ComClouderaFlumeCore::EventImpl.new(str.to_java_bytes)
    Java::ComClouderaFlumeHandlersAvro::AvroEventConvertUtil.toAvroEvent(event)
  end

  def run!
    while line = $stdin.readline.chomp rescue nil
      begin
        client.append avro_event(line)
      rescue Exception => e
        log.error("Error while appending event: #{line}")
        log.error(e.message)
        exit(1)
      end
    end
  end

end

RubyRpcClient.new(Settings).run!
